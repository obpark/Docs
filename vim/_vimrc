" orig config
set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


" /usr/share/vim/vim70/vimrc_example.vim
" http://dougblack.io/words/a-good-vimrc.html
syntax enable           " enable syntax processing

set tabstop=4           " number of visual spaces per tab
set softtabstop=4       " number of spaces in tab when editing
set expandtab           " tabs are spaces

set number              " show line numbers
set showcmd             " show command in bottom bar
"set cursorline          " highlight current line
"filetype indent on      " load filetype-specific indent files
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]

set incsearch           " search as characters are entered
set hlsearch            " highlight matches

set foldenable          " enable folding
set foldlevelstart=0    " open most folds by default
set foldnestmax=10      " 10 nested fold max
"set foldmethod=indent   " fold based on indent level
set foldmethod=marker   " foldingmarker

" my setting
set textwidth=0 
set wrapmargin=0
set nobackup            " 백업파일을 만들지 않음
set autoindent          " 자동 들여쓰기
set smartindent         " 역시 자동 들여쓰기
set shiftwidth=4        " 자동 들여쓰기 간격
set ruler               " 상태표시줄에 커서 위치를 보여줌
set title               " 타이틀바에 현재 편집중인 파일을 표시
set noundofile
autocmd BufReadPost *.html set syntax=php "html file에 php syntax 적용 
autocmd FileType text setlocal textwidth=0

"set nocompatible        " Vim 디폴트 기능들을 사용함
"set backspace=2         " 삽입 모드에서 백스페이스를 계속 허용
""set nowrapscan          " 찾기에서 파일의 맨 끝에 이르면 계속하여 찾지 않음
""set ignorecase           찾기에서 대/소문자를 구별하지 않음
"set nojoinspaces        " J 명령어로 줄을 붙일 때 마침표 뒤에 한칸만 띔
"set linespace=3         " 줄간격
"set fdm=marker          " foldingmarker
"set nowrap              " 자동 줄바꿈 안함

" ime off
"set iminsert=0
"set imsearch=-1


" gvim setting 
" colorscheme torte
" colorscheme monokai-refined
" colorscheme monokai
colorscheme solarized
set enc=utf-8
set fileencodings=utf-8

" for vim-airline
let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
let g:airline_theme='hybrid'
set laststatus=2 " turn on bottom bar

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Bitstream_Vera_Sans_Mono:h10:cHANGEUL
  elseif has("gui_macvim")
    set guifont=Bitstream_Vera_Sans_Mono:h10:cHANGEUL
  elseif has("gui_win32")
    set guifont=Bitstream_Vera_Sans_Mono:h10:cHANGEUL
  endif
endif


" restore screen size and position
if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif



